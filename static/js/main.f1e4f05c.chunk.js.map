{"version":3,"sources":["Projects.js","About.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Projects","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","setState","console","log","react_default","a","createElement","className","map","d","i","reactstrap_es","sm","title","description","target","href","link","Component","About","apply","arguments","Grid","Col","xs","smOffset","src","alt","Homepage","App","HashRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1e4f05c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { Card, Button, CardBody, CardTitle, CardText, Col } from 'reactstrap';\n\nexport class Projects extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n    componentDidMount() {\n        d3.csv(\"projects.csv\").then((data) => {\n            this.setState({\n                data: data});\n        })\n    }\n    render() {\n        console.log(this.state.data)\n        return (\n             <div className=\"container\">Projects\n                 { this.state.data.map((d, i) => {\n                       return <Col sm=\"6\" key={ \"project\" + i }>\n                              <Card>\n                                <CardBody>\n                                  <CardTitle>\n                                    { d.title }\n                                  </CardTitle>\n                                  <CardText>\n                                    { d.description }\n                                  </CardText>\n                                  <a target=\"_blank\" href={ d.link }>\n                                    <Button>Link</Button>\n                                  </a>\n                                </CardBody>\n                              </Card>\n                              <br/>\n                              </Col>\n                   \n                   }) }\n               </div>\n\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Grid, Col } from 'react-bootstrap';\nimport { Jumbotron } from 'reactstrap';\nexport class About extends Component {\n    render() {\n        return <div className=\"container\">\n\n        <Grid>\n          <Col xs={12} sm={8} smOffset={2}>\n            <h3>Who I Am</h3>\n            <p>I'm a Student at the University of Washingiton. Studying informatics at the Infromation school. I'm really proud to be part of the amazing Info family here at UW. Becuse in informatics. You learn everything you grow personally internal and professinally.</p>\n            <p>Let me share a little about my background. I was born and raised in Eritrea that is located in Horn of Africa. I moved here about 5 years ago. I have been in few countries in Africa so I love learning new language and culture as a result I speak four languages. I also like cats and puppies  I really enjoy going to hiking and natural watery places. </p>\n            <Jumbotron>\n              <p> I enjoy Natural places</p>\n            <img className=\"image\" src=\"https://cdn.pixabay.com/photo/2016/02/19/10/35/nature-1209302__480.jpg\" alt =\"natual place\"/>\n\n            <p> Traditional coffee maker for Eritrean-Ethiopian culture</p>\n            <img className=\"image\" src=\"https://cdn.pixabay.com/photo/2017/10/27/22/43/coffee-2895730__480.jpg\" alt=\"common food in Eritrea\"/>\n            </Jumbotron>\n          \n          </Col>\n          \n        </Grid>\n        <p> \n     \n        </p>\n        </div>\n    }\n}","import React, { Component } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nexport class Homepage extends Component {\n    render() {\n        return <div>\n            <Jumbotron> My name is Natsnet Demoz! Welcome to my website!!!\n                <p> I'm an Informatics Major in information school here at at the University of Washington</p>\n            </Jumbotron>    \n        </div>\n        \n    }\n}","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Projects } from './Projects';\nimport { About } from './About';\nimport { Homepage } from './Homepage';\nimport { Jumbotron } from 'reactstrap';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n              \n              <div className=\"container\">\n              <Jumbotron>\n              <img src= \"https://cdn.pixabay.com/photo/2018/01/16/10/29/waters-3085701__480.jpg\" alt = \"watery place\"/>\n              \n                <Link to=\"/\">Home</Link>\n                { ' ' }\n                <Link to=\"/projects\">Projects</Link>\n                { ' ' }\n                <Link to=\"/about\">About</Link>\n                </Jumbotron>\n                <Route exact path=\"/\" component={ Homepage } />\n                <Route path=\"/projects\" component={ Projects } />\n                <Route path=\"/about\" component={ About } />\n              </div>\n            </Router>\n            );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}